name: CI-CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set lowercase repo
        id: vars
        run: echo "REPO_LC=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ steps.vars.outputs.REPO_LC }}:sha-${{ github.sha }}

      - name: Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ steps.vars.outputs.REPO_LC }}:sha-${{ github.sha }}
          format: table
          exit-code: 0
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH

  integration-test:
    needs: build
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:6
        ports:
          - "27017:27017"
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example
        options: --health-cmd="mongosh --eval 'db.runCommand({ping:1})' --quiet" --health-interval=10s --health-timeout=15s --health-retries=10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set lowercase repo
        id: vars
        run: echo "REPO_LC=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

      - name: Set image env
        run: echo "IMAGE=${{ env.REGISTRY }}/${{ steps.vars.outputs.REPO_LC }}:sha-${{ github.sha }}" >> $GITHUB_ENV

      - name: Log in to GHCR for integration test
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get MongoDB service container ID
        id: get_mongo_container
        run: |
          echo "=== Listing all containers ==="
          docker ps -a
          MONGO_CONTAINER_ID=$(docker ps --filter "ancestor=mongo:6" --format "{{.ID}}")
          if [ -z "$MONGO_CONTAINER_ID" ]; then
            echo "❌ MongoDB container not found"
            docker ps -a
            exit 1
          fi
          echo "MONGO_CONTAINER_ID=$MONGO_CONTAINER_ID" >> $GITHUB_ENV
          echo "MongoDB container ID: $MONGO_CONTAINER_ID"

      - name: Wait for Mongo to be ready
        run: |
          echo "⏳ Initial delay to allow MongoDB initialization..."
          sleep 15
          echo "⏳ Checking MongoDB connectivity (unauthenticated)..."
          for i in {1..5}; do
            if docker run --rm \
              mongo:6 mongosh --host mongo:27017 \
              --eval 'db.runCommand({ ping: 1 })' --quiet; then
              echo "✅ MongoDB is running (unauthenticated ping successful)"
              break
            else
              echo "⏳ Still waiting for connectivity... (Attempt $i/5)"
              docker run --rm \
                mongo:6 mongosh --host mongo:27017 \
                --eval 'db.runCommand({ ping: 1 })' 2>&1 || true
              sleep 2
            fi
          done
          if [ $i -eq 5 ]; then
            echo "❌ MongoDB connectivity failed"
            docker logs ${{ env.MONGO_CONTAINER_ID }}
            exit 1
          fi
          echo "⏳ Waiting for MongoDB authentication..."
          for i in {1..30}; do
            if docker run --rm \
              mongo:6 mongosh --host mongo:27017 \
              -u root -p example --authenticationDatabase admin \
              --authenticationMechanism SCRAM-SHA-256 \
              --eval 'db.runCommand({ ping: 1 })' --quiet; then
              echo "✅ MongoDB is ready (authenticated ping successful)!"
              break
            else
              echo "⏳ Still waiting for authentication... (Attempt $i/30)"
              echo "=== mongosh error output ==="
              docker run --rm \
                mongo:6 mongosh --host mongo:27017 \
                -u root -p example --authenticationDatabase admin \
                --authenticationMechanism SCRAM-SHA-256 \
                --eval 'db.runCommand({ ping: 1 })' 2>&1 || true
              sleep 2
            fi
          done
          if [ $i -eq 30 ]; then
            echo "❌ MongoDB authentication did not succeed in time"
            echo "=== MongoDB container logs ==="
            docker logs ${{ env.MONGO_CONTAINER_ID }}
            exit 1
          fi

      - name: Pull and run app container
        run: |
          echo "=== Pulling image from GHCR ==="
          docker pull ${{ env.IMAGE }}
          
          echo "=== Running container ==="
          docker run --rm -d \
            --name app \
            -e MONGO_URI=mongodb://root:example@mongo:27017/todo?authSource=admin \
            -p 8080:8080 \
            ${{ env.IMAGE }}

      - name: Debug app container
        run: |
          echo "=== Checking if container started ==="
          docker ps -a
          
          echo "=== App container logs ==="
          docker logs app 2>&1 || echo "No app container or no logs"
          
          echo "=== Image info ==="
          docker images | grep ghcr.io || echo "No GHCR images found"

      - name: Wait & health-check
        run: |
          echo "⏳ Waiting for app to be healthy..."
          for i in {1..30}; do
            if curl -sSf http://localhost:8080 > /dev/null; then
              echo "✅ App is responding!"
              exit 0
            fi
            echo "⏳ Waiting for app..."
            sleep 2
          done
          echo "❌ App did not start in time"
          docker logs app
          exit 1